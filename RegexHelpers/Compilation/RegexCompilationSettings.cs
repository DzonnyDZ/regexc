using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Text.RegularExpressions;

namespace Dzonny.RegexCompiler.Compilation
{
    /// <summary>Settings of regular expression compiler</summary>
    public class RegexCompilationSettings : ICloneable
    {
        /// <summary>Gets collection of files to include in compilation</summary>
        public ICollection<string> Files { get; private set; } = new List<string>();

        private string assemblyName = DefaultAssemblyName;

        /// <summary>Default value of the <see cref="AssemblyName"/> property</summary>
        public const string DefaultAssemblyName ="RegularExpressionsLibrary";
        /// <summary>Gets or sets name of assembly (without any version, tokens, culture etc.) that will be used for the compiled regular expressions</summary>
        /// <exception cref="ArgumentNullException">Value being set is null</exception>
        [DefaultValue(DefaultAssemblyName)]
        public string AssemblyName
        {
            get { return assemblyName; }
            set
            {
                if (value == null) throw new ArgumentNullException(nameof(value));
                assemblyName = value;
            }
        }

        /// <summary>Creates a new object that is a copy of the current instance.</summary>
        /// <returns>A new object that is a copy of this instance.</returns>
        /// <filterpriority>2</filterpriority>
        public virtual RegexCompilationSettings Clone()
        {
            return new RegexCompilationSettings
            {
                Version = Version,
                MessageSink = MessageSink,
                PostProcess = PostProcess,
                AssemblyName = AssemblyName,
                Files = Files,
                Output = Output,
                ObjDir = ObjDir,
                Snk = Snk
            };
        }

        object ICloneable.Clone() => Clone();

        private Version version = new Version(1, 0);
        /// <summary>Gets or sets version number of regular expression assembly</summary>
        [DefaultValue("1.0")]
        public Version Version
        {
            get { return version; }
            set
            {
                if (value == null) throw new ArgumentNullException(nameof(value));
                version = value;
            }
        }

        /// <summary>Gets or sets value indicating if regular expression assembly will be post-processed and properties for named capture groups will be added</summary>
        /// <value>
        /// True to post-process the assembly and classes and members necessary to make named capture groups accessible by name.
        /// False not to post-process regular expression assembly anyhow. The assembly will be same as generated by <see cref="Regex.CompileToAssembly(RegexCompilationInfo[], System.Reflection.AssemblyName)"/>
        /// </value>
        [DefaultValue(true)]
        public bool PostProcess { get; set; } = true;

        private IRegexCompilerMessageSink messageSink = new ConsoleMessageSink();
        /// <summary>Gets or sets a target where all compiler messages are being directed to</summary>
        ///<value>Default value is instance of <see cref="ConsoleMessageSink"/></value>
        /// <remarks>When value is set to null, special implementation of <see cref="IRegexCompilerMessageSink"/> that just throws the messages will be used instead.</remarks>
        public IRegexCompilerMessageSink MessageSink
        {
            get { return messageSink; }
            set
            {
                if (value == null) messageSink = new BlackHoleMessageSink();
                messageSink = value;
            }
        }

        /// <summary>Gets or sets path of output file (DLL) where regexes will be compiled to</summary>
        /// <value>When null regexes will be compiled to file called <see cref="AssemblyName"/>.dll in current directory</value>
        public string Output { get; set; }

        /// <summary>Gets or sets path to temporary directory where the process stores it's temporary files</summary>
        /// <value>When null a temporary directory is used and then deleted</value>
        /// <remarks>The directory does not have to exists. It will be created.</remarks>
        public string ObjDir { get; set; }

        /// <summary>Gets or sets path to strong name key (SNK( file to sign the generated assembly</summary>
        /// <value>Null not to sign the generated assembly</value>
        public string Snk { get; set; }

        /// <summary>An implementation of <see cref="IRegexCompilerMessageSink"/> which just throws away all the messages (but it still counts number of errors and warnings)</summary>
        private class BlackHoleMessageSink : IRegexCompilerMessageSink
        {
            /// <summary>Receives and processes the compiler message</summary>
            /// <param name="severity">Message severity level</param>
            /// <param name="code">Identifies the error, warning or info by code</param>
            /// <param name="text">Message text</param>
            /// <param name="fileName">Optional: Name of path of file where the error happened (null when unknown)</param>
            /// <param name="line">Optional: 1-based line number where the error happened (0 when unknown)</param>
            /// <param name="column">Optional: 1-based column number where the error happened (0 when unknown)</param>
            public void Report(RegexCompilerMessageSeverity severity, RegexCompilerErrorCodes code, string text, string fileName, int line, int column)
            {
                switch (severity)
                {
                    case RegexCompilerMessageSeverity.Error: ErrorCount++; break;
                    case RegexCompilerMessageSeverity.Warning: WarningCount++; break;
                }
            }

            /// <summary>Gets total number of errors (<see cref="RegexCompilerMessageSeverity.Error"/>) passed to <see cref="IRegexCompilerMessageSink.Report"/></summary>
            public int ErrorCount { get; private set; }

            /// <summary>Gets total number of warnings (<see cref="RegexCompilerMessageSeverity.Warning"/>) passed to <see cref="IRegexCompilerMessageSink.Report"/></summary>
            public int WarningCount { get; private set; }
        }
    }
}