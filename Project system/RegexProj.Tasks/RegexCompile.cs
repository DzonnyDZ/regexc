using System;
using System.ComponentModel;
using System.Linq;
using System.Text.RegularExpressions;
using Dzonny.RegexCompiler.Compilation;
using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;
using Tools.CollectionsT.GenericT;

namespace Dzonny.RegexCompiler.RegexProj
{
    using RegexCompiler = Dzonny.RegexCompiler.Compilation.RegexCompiler;
    /// <summary>Executes RegularExpression compiler as MSBuild task</summary>
    public class RegexCompile : Task, IRegexCompilerMessageSink
    {
        /// <summary>Holds configuration of the task</summary>
        private readonly RegexCompilationSettings settings = new RegexCompilationSettings();

        /// <summary>CTor - creates a new instance of the <see cref="RegexCompile"/> class</summary>
        public RegexCompile()
        {
            settings.MessageSink = this;
        }

        #region Properties
        /// <summary>Gets or sets name and path (including extension) of resulting file</summary>
        /// <seealso cref="RegexCompilationSettings.Output"/>
        [DefaultValue(null)]
        public string Output { get { return settings.Output; } set { settings.Output = value; } }

        /// <summary>Gets or sets name and path of file or name of key source to compile with strong name</summary>
        /// <value>Provide either path or name of file, or prefixed with at (@) private key source</value>
        /// <seealso cref="RegexCompilationSettings.Snk"/>
        [DefaultValue(null)]
        public string Key { get { return settings.Snk; } set { settings.Snk = value; } }

        /// <summary>Gets or sets name of assembly (without any version, tokens, culture etc.) that will be used for the compiled regular expressions</summary>
        /// <exception cref="ArgumentNullException">Value being set is null</exception>
        /// <seealso cref="RegexCompilationSettings.AssemblyName"/>
        [DefaultValue(RegexCompilationSettings.DefaultAssemblyName)]
        public string AssemblyName { get { return settings.AssemblyName; } set { settings.AssemblyName = value; } }

        /// <summary>Gets or sets version number of regular expression assembly</summary>
        /// <seealso cref="RegexCompilationSettings.Version"/>
        [DefaultValue("1.0")]
        public string Version { get { return settings.Version.ToString(); } set { settings.Version = System.Version.Parse(value); } }

        /// <summary>Gets or sets value indicating if regular expression assembly will be post-processed and properties for named capture groups will be added</summary>
        /// <value>
        /// True to post-process the assembly and classes and members necessary to make named capture groups accessible by name.
        /// False not to post-process regular expression assembly anyhow. The assembly will be same as generated by <see cref="Regex.CompileToAssembly(RegexCompilationInfo[], System.Reflection.AssemblyName)"/>
        /// </value>
        /// <seealso cref="RegexCompilationSettings.PostProcess"/>
        [DefaultValue(true)]
        public bool PostProcess { get { return settings.PostProcess; } set { settings.PostProcess = value; } }

        /// <summary>Gets or sets path to temporary directory where the process stores it's temporary files</summary>
        /// <value>When null a temporary directory is used and then deleted</value>
        /// <remarks>The directory does not have to exists. It will be created.</remarks>
        /// <see cref="RegexCompilationSettings.ObjDir"/>
        [DefaultValue(null)]
        public string ObjDir { get { return settings.ObjDir; } set { settings.ObjDir = value; } }
        #endregion


        /// <summary>Gets or sets source files</summary>
        [DefaultValue(null), Required]
        public string[] Files
        {
            get { return settings.Files.ToArray(); }
            set
            {
                settings.Files.Clear();
                settings.Files.AddRange(value);
            }
        }

        /// <summary>Executes a task.</summary>
        /// <returns>True if the task executed successfully; otherwise, false.</returns>
        public override bool Execute()
        {
            ErrorCount = 0;
            WarningCount = 0;

            var c = new RegexCompiler(settings);
            c.Compile();

            return ErrorCount == 0;
        }

        void IRegexCompilerMessageSink.Report(RegexCompilerMessageSeverity severity, RegexCompilerErrorCodes code, string text, string fileName, int line, int column)
        {
            switch (severity)
            {
                case RegexCompilerMessageSeverity.Error:
                    Log.LogError(null, $"RXC{code:d}", null, fileName, line, column, -1, -1, text);
                    ErrorCount++;
                    break;
                case RegexCompilerMessageSeverity.Warning:
                    Log.LogWarning(null, $"RXC{code:d}", null, fileName, line, column, -1, -1, text);
                    WarningCount++;
                    break;
                default: Log.LogMessage(null, $"RXC{code:d}", null, fileName, line, column, -1, -1, text); break;
            }
        }

        /// <summary>Gets total number of errors (<see cref="RegexCompilerMessageSeverity.Error"/>) passed to <see cref="IRegexCompilerMessageSink.Report"/></summary>
        public int ErrorCount { get; private set; }
        /// <summary>Gets total number of warnings (<see cref="RegexCompilerMessageSeverity.Warning"/>) passed to <see cref="IRegexCompilerMessageSink.Report"/></summary>
        public int WarningCount { get; private set; }
    }
}